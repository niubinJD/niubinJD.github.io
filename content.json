{"meta":{"title":"minion's note","subtitle":null,"description":null,"author":"minion","url":"https://niubinjd.github.io","root":"/"},"pages":[{"title":"关于","date":"2019-10-11T07:52:41.620Z","updated":"2019-10-11T07:52:41.620Z","comments":true,"path":"about/index.html","permalink":"https://niubinjd.github.io/about/index.html","excerpt":"","text":""},{"title":"所有分类","date":"2019-10-11T07:51:14.142Z","updated":"2019-10-11T07:51:14.142Z","comments":true,"path":"categories/index.html","permalink":"https://niubinjd.github.io/categories/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2019-10-11T07:49:54.309Z","updated":"2019-10-11T07:49:54.309Z","comments":true,"path":"tags/index.html","permalink":"https://niubinjd.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"netapp内网穿透","slug":"netapp","date":"2019-12-20T07:30:38.000Z","updated":"2019-12-20T09:13:27.891Z","comments":true,"path":"2019/netapp/","link":"","permalink":"https://niubinjd.github.io/2019/netapp/","excerpt":"","text":"进入netapp官网，创建隧道进入内网服务器，下载netapp客户端123&gt; curl http://download.natapp.cn/assets/downloads/clients/2_3_9/natapp_linux_arm64_2_3_9.zip -o netapp.zip&gt; unzip netapp.zip&gt; chmod a+x netapp然后下载配置文件config.ini1&gt; curl http://download.natapp.cn/assets/downloads/config.ini -o config.ini将netapp与config.ini置于同一目录配置config.ini,正常情况下，只需要配置authtoken(将之前创建的隧道的authtoken配置到此)然后启动123&gt; ./netapp或者&gt; ./netapp -authtoken=xxxxxxxxxxxx启动后可以看到当状态为online时,可以通过 http://xxxxx.natappfree.cc 访问内网服务","categories":[{"name":"内网穿透","slug":"内网穿透","permalink":"https://niubinjd.github.io/categories/内网穿透/"}],"tags":[{"name":"netapp","slug":"netapp","permalink":"https://niubinjd.github.io/tags/netapp/"},{"name":"内网穿透","slug":"内网穿透","permalink":"https://niubinjd.github.io/tags/内网穿透/"}]},{"title":"maven使用","slug":"maven-usage","date":"2019-12-16T07:46:16.000Z","updated":"2019-12-17T09:32:07.487Z","comments":true,"path":"2019/maven-usage/","link":"","permalink":"https://niubinjd.github.io/2019/maven-usage/","excerpt":"","text":"配置可选依赖(optional标签)123456&lt;dependency&gt; &lt;groupId&gt;com.google.errorprone&lt;/groupId&gt; &lt;artifactId&gt;error_prone_annotations&lt;/artifactId&gt; &lt;version&gt;2.3.4&lt;/version&gt; &lt;optional&gt;true&lt;/optional&gt;&lt;/dependency&gt;定义及使用maven属性(properties标签)12345678910&lt;properties&gt; &lt;guava.version&gt;28.1-jre&lt;/guava.version&gt;&lt;/properties&gt;&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;com.google.guava&lt;/groupId&gt; &lt;artifactId&gt;guava&lt;/artifactId&gt; &lt;version&gt;$&#123;guava.version&#125;&lt;/version&gt; &lt;/dependency&gt;&lt;/dependencies&gt;排除maven依赖(exclusions标签)123456789101112131415161718&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;com.google.guava&lt;/groupId&gt; &lt;artifactId&gt;guava&lt;/artifactId&gt; &lt;version&gt;28.1-jre&lt;/version&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;com.google.errorprone&lt;/groupId&gt; &lt;artifactId&gt;error_prone_annotations&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.google.errorprone&lt;/groupId&gt; &lt;artifactId&gt;error_prone_annotations&lt;/artifactId&gt; &lt;version&gt;2.3.4&lt;/version&gt; &lt;/dependency&gt;&lt;/dependencies&gt;配置maven项目打包成可执行jar123456789101112131415161718192021222324&lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-shade-plugin&lt;/artifactId&gt; &lt;executions&gt; &lt;execution&gt; &lt;phase&gt;package&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;shade&lt;/goal&gt; &lt;/goals&gt; &lt;configuration&gt; &lt;transformers&gt; &lt;!-- 配置启动类 --&gt; &lt;transformer implementation=&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;&gt; &lt;mainClass&gt;Application&lt;/mainClass&gt; &lt;/transformer&gt; &lt;/transformers&gt; &lt;/configuration&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt;maven依赖调解方案（依赖中有两个相同的名称但不同版本的包）优先使用依赖路径最短的包，当依赖路径一样长时，使用定义最早的版本查看maven项目的依赖及依赖树1234&lt;!-- 依赖列表 --&gt;&gt; mvn dependency:list&lt;!-- 查看依赖树 --&gt;&gt; mvn dependency:tree打包时跳过test1&gt; mvn install -Dmaven.test.skip=true","categories":[{"name":"maven","slug":"maven","permalink":"https://niubinjd.github.io/categories/maven/"}],"tags":[{"name":"maven","slug":"maven","permalink":"https://niubinjd.github.io/tags/maven/"}]},{"title":"hexo个人博客搭建","slug":"hexo","date":"2019-10-11T05:46:46.000Z","updated":"2019-12-16T07:47:20.375Z","comments":true,"path":"2019/hexo/","link":"","permalink":"https://niubinjd.github.io/2019/hexo/","excerpt":"使用hexo搭建个人博客。","text":"使用hexo搭建个人博客。hexo运行及发布环境搭建在使用hexo搭建个人博客之前需先安装Git和NodeJs。hexo安装及初始化打开命令行执行：1npm install hexo-cli -g初始化hexo项目选择博客项目的根目录，然后执行123456&lt;!-- 初始化blog项目 --&gt;hexo init blog&lt;!-- 进入blog目录 --&gt;cd blog&lt;!-- 安装依赖 --&gt;npm install本地运行执行命令后，访问http://localhost:40001hexo serve发布到github pages在github设置中添加ssh-key添加完成后，创建博客的发布仓库修改根目录下的配置文件_config.yml，添加博客发布相关配置添加博客发布相关包1npm install hexo-deployer-git --save然后执行命令，将博客发布到配置的地址123hexo clean hexo generatehexo deploy然后就可以访问xxxx.github.io查看效果配置hexo项目主题hexo主题文件存放在themes目录下，默认主题是xxx, 你可以在hexo主题库，挑选一个主题用于你的博客，例如material x在根目录下执行1234&lt;!-- 下载主题 --&gt;git clone https://github.com/xaoxuu/hexo-theme-material-x.git ./themes/material-x&lt;!-- 安装主题所需依赖--&gt;npm i -S hexo-generator-search hexo-generator-json-content hexo-renderer-less然后在配置文件中将主题配置theme字段的值修改为material-x，这样就将主题应用于你的博客了。","categories":[{"name":"环境搭建","slug":"环境搭建","permalink":"https://niubinjd.github.io/categories/环境搭建/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://niubinjd.github.io/tags/hexo/"}]}]}